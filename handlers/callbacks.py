from aiogram import Router
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from config import DOCUMENTS
from keyboards.inline import get_main_type_keyboard
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from modules.downloadFile import download_and_send_file
from configs.faqText import faq_text
from configs.helpText import help_text
from handlers.auth import AuthForm

router = Router()


# --- FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
class Form(StatesGroup):
    doc_type = State()
    authority = State()
    subtype = State()


@router.callback_query()
async def handle_callback(query: CallbackQuery, state: FSMContext):

    current_state = await state.get_state()
    if current_state == AuthForm.password:
        await query.answer("üîê –°–ø–æ—á–∞—Ç–∫—É –≤–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å.", show_alert=True)
        return

    data = query.data.split(":")
    await query.answer()

    # –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if query.data == "back_to_start":
        await state.clear()
        await query.message.edit_text(
            "üìÅ –û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–∫—Ä–æ–∫ 1 –∑ 3):", reply_markup=get_main_type_keyboard()
        )
        return

    # –®–∞–≥ 1 ‚Äî –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    if data[0] == "doc_type":
        doc_type = data[1]
        await state.update_data(doc_type=doc_type)

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üëÆ –ö–æ–º–∞–Ω–¥–∏—Ä—É", callback_data="authority:–∫–æ–º–∞–Ω–¥–∏—Ä")],
                [InlineKeyboardButton(text="üìã –ù–∞—á–∞–ª—å–Ω–∏–∫—É", callback_data="authority:–Ω–∞—á–∞–ª—å–Ω–∏–∫")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
            ]
        )

        await query.message.edit_text(
            f"üîç –û–±—Ä–∞–Ω–æ —Ç–∏–ø: *{doc_type.capitalize()}*\n\nüë§ –û–±–µ—Ä—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–∫—Ä–æ–∫ 2 –∑ 3):",
            reply_markup=keyboard,
        )
        await state.set_state(Form.authority)
        return

    # –®–∞–≥ 2 ‚Äî –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–∫–æ–º–∞–Ω–¥–∏—Ä—É –∏–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∏–∫—É)
    if data[0] == "authority":
        authority = data[1]
        user_data = await state.get_data()
        doc_type = user_data.get("doc_type")
        if not doc_type:
            await query.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
            await state.clear()
            return

        await state.update_data(authority=authority)

        subtypes = DOCUMENTS.get(doc_type, {})
        keyboard = [
            [InlineKeyboardButton(text=doc["name"].capitalize(), callback_data=f"subtype:{key}")]
            for key, doc in subtypes.items()
        ]
        keyboard.append(
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"doc_type:{doc_type}")]
        )

        await query.message.edit_text(
            f"üì§ –û—Ç—Ä–∏–º—É–≤–∞—á: *{authority.capitalize()}*\n\nüìå –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–∏–ø (–∫—Ä–æ–∫ 3 –∑ 3):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        )
        await state.set_state(Form.subtype)
        return

    if query.data == "back_to_authority":
        user_data = await state.get_data()
        doc_type = user_data.get("doc_type")

        if not doc_type:
            await query.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
            await state.clear()
            return

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üëÆ –ö–æ–º–∞–Ω–¥–∏—Ä—É", callback_data="authority:–∫–æ–º–∞–Ω–¥–∏—Ä")],
                [InlineKeyboardButton(text="üìã –ù–∞—á–∞–ª—å–Ω–∏–∫—É", callback_data="authority:–Ω–∞—á–∞–ª—å–Ω–∏–∫")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
            ]
        )

        await query.message.edit_text(
            f"üîç –û–±—Ä–∞–Ω–æ —Ç–∏–ø: *{doc_type.capitalize()}*\n\nüë§ –û–±–µ—Ä—ñ—Ç—å –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ (–∫—Ä–æ–∫ 2 –∑ 3):",
            reply_markup=keyboard,
        )
        await state.set_state(Form.authority)
        return

    # –®–∞–≥ 2/1 ‚Äî –≤—ã–±–æ—Ä –ø–æ–¥—Ç–∏–ø–∞ (–¥–ª—è –≥—Ä–∞–∂–¥–∞–Ω—Å–∫–æ–≥–æ –∑–∞—è–≤–ª–µ–Ω–∏—è)
    if data[0] == "civil_statement":
        doc_type = data[1]
        await state.update_data(doc_type=doc_type)
        if not doc_type:
            await query.message.answer("‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞. –ü–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É.")
            await state.clear()
            return

        subtypes = DOCUMENTS.get(doc_type, {})
        keyboard = [
            [InlineKeyboardButton(text=doc["name"].capitalize(), callback_data=f"subtype:{key}")]
            for key, doc in subtypes.items()
        ]
        keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_start")])

        await query.message.edit_text(
            f"üìå –û–±–µ—Ä—ñ—Ç—å –ø—ñ–¥—Ç–∏–ø (2 –∑ 2):",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        )
        await state.set_state(Form.subtype)
        return

    # –®–∞–≥ 3 ‚Äî –≤—ã–±–æ—Ä –ø–æ–¥—Ç–∏–ø–∞
    if data[0] == "subtype":
        subtype_key = data[1]
        user_data = await state.get_data()
        doc_type = user_data.get("doc_type")
        authority = user_data.get("authority")

        doc = DOCUMENTS.get(doc_type, {}).get(subtype_key)
        if not doc:
            await query.message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        if doc_type == "–∑–∞—è–≤–∞":
            # –ó–∞—è–≤–∞ ‚Äî –±–µ–∑ —Ä–æ–ª–µ–π
            docx_id = doc.get("docx")
            pdf_id = doc.get("pdf")
        else:
            # –†–∞–ø–æ—Ä—Ç ‚Äî —Å —Ä–æ–ª—è–º–∏
            docx_id = (
                doc.get("docx_commander") if authority == "–∫–æ–º–∞–Ω–¥–∏—Ä" else doc.get("docx_chief")
            )
            pdf_id = doc.get("pdf_commander") if authority == "–∫–æ–º–∞–Ω–¥–∏—Ä" else doc.get("pdf_chief")

        if not docx_id or not pdf_id:
            await query.message.answer(
                "‚ö†Ô∏è –î–ª—è —Ü—å–æ–≥–æ –ø—ñ–¥—Ç–∏–ø—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ñ–∞–π–ª–∏. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
            return

        pdf_url = f"https://drive.google.com/file/d/{pdf_id}/preview"

        # await state.update_data(authority=authority)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data=f"download:{subtype_key}"
                    ),
                    InlineKeyboardButton(text="üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", url=pdf_url),
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"back_to_authority")],
            ]
        )

        await query.message.edit_text(
            f"‚úÖ –û–±—Ä–∞–Ω–æ: {doc_type.capitalize()} ‚Üí {doc['name'].capitalize()}",
            reply_markup=keyboard,
        )
        return

    # –®–∞–≥ 4 ‚Äî –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    if data[0] == "download":
        subtype_key = data[1]
        user_data = await state.get_data()
        doc_type = user_data.get("doc_type")
        authority = user_data.get("authority")

        doc = DOCUMENTS.get(doc_type, {}).get(subtype_key)
        if not doc:
            await query.message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        if doc_type == "–∑–∞—è–≤–∞":
            docx_id = doc.get("docx")
        else:
            docx_id = (
                doc.get("docx_commander") if authority == "–∫–æ–º–∞–Ω–¥–∏—Ä" else doc.get("docx_chief")
            )

        if not docx_id:
            await query.message.answer("‚ö†Ô∏è DOCX —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        docx_url = f"https://drive.google.com/uc?export=download&id={docx_id}"

        await download_and_send_file(
            query.bot,
            docx_url,
            doc["name"],
            query.message.chat.id,
            callback_function=get_main_type_keyboard,
        )
        await query.message.delete()

    # FAQ / –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è
    #####################################
    if data[0] == "faq":
        await query.message.edit_reply_markup(None)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚öôÔ∏è –î–æ–ø–æ–º–æ–≥–∞", callback_data="help")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
            ]
        )
        await query.message.edit_text(faq_text, reply_markup=keyboard)
        return

    # –î–æ–ø–æ–º–æ–≥–∞
    #####################################
    if data[0] == "help":
        await query.message.edit_reply_markup(None)
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        )
        await query.message.edit_text(
            help_text, reply_markup=keyboard, disable_web_page_preview=True
        )
        return

    # –°–∏—Å—Ç–µ–º–∞ –µ–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±—ñ–≥—É –ù–ì–£
    #####################################
    if data[0] == "sed":

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è", callback_data="sed_intruction")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
            ]
        )
        await query.message.edit_text(
            "üìö –ü–æ—Å—ñ–±–Ω–∏–∫ –¥–ª—è –°–∏—Å—Ç–µ–º–∏ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±—ñ–≥—É –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó –≥–≤–∞—Ä–¥—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ (–°–ï–î –ù–ì–£)\n\n"
            "üëá –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:",
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )
        return

    # –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –°–ï–î –ù–ì–£
    if data[0] == "sed_intruction":
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="sed")]]
        )
        await query.message.edit_text(
            "üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –¥–ª—è –°–∏—Å—Ç–µ–º–∏ –ï–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –î–æ–∫—É–º–µ–Ω—Ç–æ–æ–±—ñ–≥—É –ù–∞—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ—ó –≥–≤–∞—Ä–¥—ñ—ó –£–∫—Ä–∞—ó–Ω–∏ (–°–ï–î –ù–ì–£)\n\n"
            "üëá –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –æ–Ω–ª–∞–π–Ω",
            reply_markup=keyboard,
            disable_web_page_preview=True,
        )

        doc = DOCUMENTS.get("sed", {}).get("instruction")
        if not doc:
            await query.message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        pdf_id = doc.get("pdf")

        if not pdf_id:
            await query.message.answer("‚ö†Ô∏è –§–∞–π–ª–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
            return

        pdf_url = f"https://drive.google.com/file/d/{pdf_id}/preview"

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì• –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏", callback_data=f"download_sed:{pdf_id}"
                    ),
                    InlineKeyboardButton(text="üëÅÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏", url=pdf_url),
                ],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"sed")],
            ]
        )

        await query.message.edit_text(
            "üìö –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è –°–ï–î –ù–ì–£\n\n"
            "üëá –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –∞–±–æ –ø–µ—Ä–µ–≥–ª—è–Ω—å—Ç–µ –æ–Ω–ª–∞–π–Ω",
            reply_markup=keyboard,
        )
        return

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –°–ï–î –ù–ì–£
    if data[0] == "download_sed":
        pdf_id = data[1]
        if not pdf_id:
            await query.message.answer("‚ùå –î–æ–∫—É–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            return

        pdf_url = f"https://drive.google.com/uc?export=download&id={pdf_id}"

        await download_and_send_file(
            query.bot,
            pdf_url,
            "–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –°–ï–î –ù–ì–£",
            query.message.chat.id,
            callback_function=get_main_type_keyboard,
        )
        await query.message.delete()
